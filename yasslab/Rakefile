top_level = self

using(Module.new do
  refine(top_level.singleton_class) do
    def contents
      %w[preface smallest-app crud new-create model gem picture-upload postface]
    end

    def create_toc
      toc_path = "_site/frontmatter_refinement.html"
      File.open(toc_path, 'w+') { |f| f.write(generate_toc) }
    end

    def generate_toc
      body = "<h1 class='contents'>目次</h1><div id='table_of_contents'><ul>"
      contents.each.with_index(1) do |file_name, sec_number|
        file = File.open("_site/#{file_name}.html")
        html = Nokogiri::HTML(file, nil, 'utf-8')
        file_name.gsub!('-','_')
        toc_name = html.title
        body << "<li class='chapter'><a href='/textbook/#{file_name}' class='heading hyperref'><span class='number'>第#{sec_number}章</span>#{toc_name}</a></li>"
      end
      body << "</ul></div>"
      body
    end
  end
end)

desc 'refine html'
task :refine_html do
  require 'nokogiri'

  puts "refinement process start"

  contents.each.with_index(1) do |file_name, sec_number|
    file = File.open("_site/#{file_name}.html")
    html = Nokogiri::HTML(file, nil, 'utf-8')

    html.search('.header').remove
    html.search('head').remove

    # Change title to include chapters
    html.at_css('h1').prepend_child "<span class='number'>第#{sec_number}章</span>"
    html.at_css('.site')['id'] = file_name
    html.at_css('.site').add_class('textbook-content')

    html.css('#home .posts a').each do |a|
      href = a.attr('href')
      a.attributes['href'].value = href.gsub!('-','_') # Change to support RailsTutorialJP naming style
    end

    html.css('img').each do |i|
      src = i.attr('src')
      i.attributes['src'].value = "#{ENV['RAILS_TEXT_S3_PATH']}/#{src}"
    end

    file_name.gsub!('-','_') # Change to support RailsTutorialJP naming style

    refine_path = "_site/#{file_name}_refinement.html"
    File.open(refine_path, 'w+') { |f| f.write(html) }

    puts "refinement file: #{file_name}"
  end
  create_toc
  puts "refinement process end"
end
